// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"kratos-template/internal/biz"
	"kratos-template/internal/conf"
	"kratos-template/internal/data"
	"kratos-template/internal/route"
	"kratos-template/internal/server"
	"kratos-template/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, job *conf.Job, logger log.Logger) (*kratos.App, func(), error) {
	grpcServer := server.NewGRPCServer(confServer, logger)
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	helloRepo := data.NewHelloRepo(dataData)
	helloUsecase := biz.NewHelloUsecase(confData, helloRepo)
	jobService := service.NewJobService(helloUsecase)
	cronWorker := server.NewCronWorker(job, jobService)
	helloAPIService := service.NewHelloAPIService(confData, helloUsecase)
	v := route.RegisterHttpService(confData, helloAPIService)
	v2 := server.NewAllHttpServer(confServer, confData, logger, v)
	app := newApp(logger, grpcServer, cronWorker, v2)
	return app, func() {
		cleanup()
	}, nil
}
